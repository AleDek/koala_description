<?xml version="1.0" ?>
<launch>
  <arg name="conf_upside" default="false"/>
  <arg unless="$(arg conf_upside)" name="model_name" default="koala"/>
  <arg if="$(arg conf_upside)" name="model_name" default="koala_upside"/>
  <arg name="rvizconfig" default="$(find koala_description)/conf/conf.rviz"/>
   
    <!-- Run Qground control station 
  <node pkg="koala_mavlink" type="QGroundControl.AppImage" name="QGround" output="screen"/>
  -->
  <!-- Launch gazebo, px4 sitl and mavros -->
  <include file="$(find px4)/launch/mavros_posix_sitl.launch" > 
      <arg name="vehicle" value="$(arg model_name)" />
      <arg name="Y" value="3.14" />
  </include>
  <!-- Launch fake optitrack listener to make px4 work with vision and not GPS -->
  <node pkg="optitrack_listener" name="simu_optitrack_listener" type="simu_optitrack_listener" output="screen">
    <param name="model_name" type="string" value="$(arg model_name)" />
    <param name="output_topic_name" type="string" value="/mavros/vision_pose/pose"/>
    <param name="output_ref_frame" type="string" value="enu" />
    <param name="publish_odom_pose" value="true" /> 
  </node>

  <node pkg="tf" type="static_transform_publisher" name="map_odom_static" args="0 0 0 0 0 0 map odom 100" />

  <!-- Run robot state publisher to have tf and rviz -->
  <!-- <include file="$(find koala_description)/launch/display.launch" > 
  </include> -->

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find koala_description)/urdf/depth_camera.urdf.xacro' parent:=pipecam_link use_nominal_extrinsics:=true add_plug:=true use_mesh:=true" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  
  <!-- simulation stepper server -->
    <rosparam command="load" file="$(find koala_description)/conf/simu_stepper_server_params.yaml" />
    <node pkg="koala_description" type="simu_stepper_server" name="simu_stepper_server" output="screen">
        <param name="robot_name_gz" type="string" value="$(arg model_name)" /> 
        <param if="$(arg conf_upside)" name="cam_is_down" type="bool" value="false" />
        <param unless="$(arg conf_upside)" name="cam_is_down" type="bool" value="true" />  
    </node>

  <!-- rviz -->
  <node name="rviz" pkg="rviz" args="-d $(arg rvizconfig)" type="rviz" required="true"/>

  <include file="$(find landing_point_detection)/launch/pipe_detection.launch" > 
  </include>

  <rosparam command="load" file="$(find landing_procedure)/conf/landing_controller_params.yaml" />
  <node pkg="landing_procedure" type="pipe_landing" name ="pipe_landing" output="screen" />

  <!-- set logger level for landing_point_detection  -->
  <node pkg="rosservice" type="rosservice" name="mavros_log_level" args="call --wait /mavros/set_logger_level 'ros.mavros' 'warn'" />

  <!-- set logger level for landing_point_detection  -->
  <node pkg="rosservice" type="rosservice" name="landing_point_detection_log_level" args="call --wait /landing_point_detection/set_logger_level 'ros.landing_point_detection' 'warn'" />

    
</launch>







